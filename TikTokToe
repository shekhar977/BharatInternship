#include <iostream>
#include <vector>

// Function to initialize the game board
void initializeBoard(std::vector<std::vector<char>> &board) {
    for (int i = 0; i < 3; i++) {
        std::vector<char> row;
        for (int j = 0; j < 3; j++) {
            row.push_back(' ');
        }
        board.push_back(row);
    }
}

// Function to display the game board
void displayBoard(const std::vector<std::vector<char>> &board) {
    std::cout << "  1 2 3" << std::endl;
    for (int i = 0; i < 3; i++) {
        std::cout << i + 1 << " ";
        for (int j = 0; j < 3; j++) {
            std::cout << board[i][j];
            if (j < 2) {
                std::cout << "|";
            }
        }
        std::cout << std::endl;
        if (i < 2) {
            std::cout << "  -+-+-" << std::endl;
        }
    }
}

// Function to check if the game has been won
bool checkWin(const std::vector<std::vector<char>> &board, char player) {
    // Check rows, columns, and diagonals for a win
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
            return true; // Row win
        }
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
            return true; // Column win
        }
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
        return true; // Diagonal win (top-left to bottom-right)
    }
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
        return true; // Diagonal win (top-right to bottom-left)
    }
    return false;
}

// Function to check if the game is a draw
bool checkDraw(const std::vector<std::vector<char>> &board) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                return false; // The game is not a draw if there are still empty spaces
            }
        }
    }
    return true;
}

int main() {
    std::vector<std::vector<char>> board;
    initializeBoard(board);
    char currentPlayer = 'X';
    bool gameOver = false;

    while (!gameOver) {
        displayBoard(board);
        int row, col;

        // Get the current player's move
        std::cout << "Player " << currentPlayer << ", enter your move (row and column): ";
        std::cin >> row >> col;

        // Check if the move is valid
        if (row >= 1 && row <= 3 && col >= 1 && col <= 3 && board[row - 1][col - 1] == ' ') {
            board[row - 1][col - 1] = currentPlayer;

            // Check for a win
            if (checkWin(board, currentPlayer)) {
                displayBoard(board);
                std::cout << "Player " << currentPlayer << " wins!" << std::endl;
                gameOver = true;
            } else if (checkDraw(board)) {
                displayBoard(board);
                std::cout << "It's a draw!" << std::endl;
                gameOver = true;
            } else {
                // Switch players
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            }
        } else {
            std::cout << "Invalid move. Try again." << std::endl;
        }
    }

    std::cout << "Do you want to play again? (y/n): ";
    char playAgain;
    std::cin >> playAgain;

    if (playAgain == 'y' || playAgain == 'Y') {
        initializeBoard(board);
        currentPlayer = 'X';
        gameOver = false;
    } else {
        std::cout << "Thanks for playing! Goodbye." << std::endl;
    }

    return 0;
}
